package com.boardgameinventory

import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import com.boardgameinventory.api.BarcodeApiService
import com.boardgameinventory.data.AppDatabase
import com.boardgameinventory.data.Game
import com.boardgameinventory.data.GameEntity
import com.boardgameinventory.repository.GameRepository
import kotlinx.coroutines.runBlocking
import org.junit.After
import org.junit.Assert.assertEquals
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith
import org.robolectric.annotation.Config
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

@RunWith(AndroidJUnit4::class)
@Config(sdk = [33])
class EndToEndTest {

    private lateinit var apiService: BarcodeApiService
    private lateinit var database: AppDatabase
    private lateinit var gameRepository: GameRepository

    @Before
    fun setUp() {
        println("[DEBUG] Starting test setup at: ${System.currentTimeMillis()}")
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        database = AppDatabase.getTestDatabase(context)
        gameRepository = GameRepository(database.gameDao(), context) // Initialize GameRepository

        apiService = Retrofit.Builder()
            .baseUrl("https://barcodes1.p.rapidapi.com/")
            .addConverterFactory(GsonConverterFactory.create())
            .build()
            .create(BarcodeApiService::class.java)
        println("[DEBUG] Test setup completed at: ${System.currentTimeMillis()}")
    }

    @After
    fun tearDown() {
        database.close()
    }

    @Test
    fun testEndToEndBarcodeLookupAndDatabaseInsertion() = runBlocking {
        println("[DEBUG] Starting barcode lookup at: ${System.currentTimeMillis()}")
        val productInfo = gameRepository.lookupBarcodeInfo("850038580490") // Use GameRepository
        println("[DEBUG] Barcode lookup completed with product info: $productInfo at: ${System.currentTimeMillis()}")

        // Insert into database
        val gameEntity = GameEntity(
            barcode = "850038580490",
            title = productInfo?.getDisplayTitle(),
            brand = productInfo?.getDisplayBrand(),
            description = productInfo?.getDisplayDescription(),
            imageUrl = productInfo?.getDisplayImage()
        )
        println("[DEBUG] Inserting data into database with game entity: $gameEntity at: ${System.currentTimeMillis()}")

        // Convert GameEntity to Game
        val game = Game(
            id = 0, // Auto-generated by Room
            name = gameEntity.title ?: "Unknown",
            barcode = gameEntity.barcode,
            bookcase = gameEntity.bookcase ?: "Unknown",
            shelf = gameEntity.shelf ?: "Unknown",
            loanedTo = gameEntity.loanedTo,
            description = gameEntity.description,
            imageUrl = gameEntity.imageUrl,
            dateAdded = gameEntity.dateAdded ?: System.currentTimeMillis(),
            dateLoaned = gameEntity.dateLoaned
        )

        println("[DEBUG] Inserting data into database with game: $game at: ${System.currentTimeMillis()}")
        database.gameDao().insertGame(game)
        println("[DEBUG] Data insertion completed at: ${System.currentTimeMillis()}")

        // Query database
        println("[DEBUG] Querying database for barcode: 850038580490 at: ${System.currentTimeMillis()}")
        val retrievedGame = database.gameDao().getGameByBarcode("850038580490")
        println("[DEBUG] Retrieved game entity: $retrievedGame at: ${System.currentTimeMillis()}")

        // Assert
        assertEquals("850038580490", retrievedGame?.barcode)
        assertEquals(productInfo?.getDisplayTitle(), retrievedGame?.name)
        assertEquals(productInfo?.getDisplayDescription(), retrievedGame?.description)
        assertEquals(productInfo?.getDisplayImage(), retrievedGame?.imageUrl)

        println("[DEBUG] Assertions completed successfully at: ${System.currentTimeMillis()}")
    }
}
