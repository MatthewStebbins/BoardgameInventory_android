plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'com.google.devtools.ksp'
    id 'kotlin-parcelize'
    id 'jacoco'
}

android {
    namespace = 'com.boardgameinventory'
    compileSdk = 36

    defaultConfig {
        applicationId = "com.boardgameinventory"
        minSdk = 28
        targetSdk = 36
        versionCode = 5
        versionName = "1.1.01"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        
        // Load API keys from local.properties
        Properties properties = new Properties()
        if (project.rootProject.file('local.properties').exists()) {
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
        }
        
        buildConfigField "String", "RAPIDAPI_KEY", "\"${properties.getProperty('RAPIDAPI_KEY', 'your_api_key_here')}\""
        buildConfigField "String", "RAPIDAPI_HOST", "\"${properties.getProperty('RAPIDAPI_HOST', 'barcodes1.p.rapidapi.com')}\""

        // Add AdMob IDs to BuildConfig
        buildConfigField "String", "ADMOB_APP_ID", "\"${properties.getProperty('ADMOB_APP_ID', 'ca-app-pub-0000000000000000~0000000000')}\""
        buildConfigField "String", "ADMOB_BANNER_ID", "\"${properties.getProperty('ADMOB_BANNER_ID', 'ca-app-pub-0000000000000000/0000000000')}\""
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            '-Xjvm-default=all'
        ]
    }

    buildFeatures {
        viewBinding = true
        dataBinding = true
        buildConfig = true  // Enable BuildConfig generation
    }

    signingConfigs {
        release {
            if (project.rootProject.file('local.properties').exists()) {
                Properties properties = new Properties()
                properties.load(project.rootProject.file('local.properties').newDataInputStream())

                storeFile file(properties.getProperty('RELEASE_STORE_FILE'))
                storePassword properties.getProperty('RELEASE_STORE_PASSWORD')
                keyAlias properties.getProperty('RELEASE_KEY_ALIAS')
                keyPassword properties.getProperty('RELEASE_KEY_PASSWORD')
            }
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            debuggable true
            minifyEnabled = false
            shrinkResources = false
            buildConfigField "boolean", "DEVELOPER_MODE_ENABLED", "true"
            resValue "string", "app_name", "BGI Debug"
        }

        release {
            signingConfig = signingConfigs.release
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            debuggable false
            buildConfigField "boolean", "DEVELOPER_MODE_ENABLED", "false"
            resValue "string", "app_name", "Board Game Inventory"

            // Add specific ProGuard rules for release builds
            proguardFile 'proguard-rules-release.pro'

            ndk {
                debugSymbolLevel = 'FULL'
            }
        }
    }

    testOptions {
        unitTests.includeAndroidResources = true
        unitTests.all {
            systemProperty 'robolectric.enabledSdks', '33'
        }
    }
}

tasks.withType(Test).configureEach {
    jvmArgs += ['-noverify']
}

jacoco {
    toolVersion = "0.8.9"
}

tasks.register('jacocoTestReport', JacocoReport) {
    dependsOn "testDebugUnitTest" // Updated to use the correct test task

    reports {
        xml.required = true
        html.required = true
    }

    def fileFilter = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            '**/*Test*.*',
            'android/**/*.*',
            'org/robolectric/**' // Exclude Robolectric classes
    ]

    def debugTree = fileTree(dir: layout.buildDirectory.dir("intermediates/javac/debug").get().asFile, excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))
    executionData.setFrom(fileTree(dir: layout.buildDirectory.get().asFile, includes: ["jacoco/testDebugUnitTest.exec", "outputs/code-coverage/connected/*coverage.ec"]))
}

dependencies {
    implementation 'androidx.core:core-ktx:1.17.0'
    implementation 'androidx.appcompat:appcompat:1.7.1'
    implementation 'com.google.android.material:material:1.12.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.9.2'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.9.2'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.9.3'
    implementation 'androidx.navigation:navigation-ui-ktx:2.9.3'
    implementation 'androidx.recyclerview:recyclerview:1.4.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    
    // Room database (use KSP for annotation processing)
    implementation 'androidx.room:room-runtime:2.7.2'
    implementation 'androidx.room:room-ktx:2.7.2'
    implementation 'androidx.room:room-paging:2.7.2'
    ksp 'androidx.room:room-compiler:2.7.2'

    // Paging 3
    implementation 'androidx.paging:paging-runtime-ktx:3.3.6'
    
    // Coroutines (compatible with Kotlin 2.0.21)
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.10.2'

    // Networking
    implementation 'com.squareup.retrofit2:retrofit:3.0.0'
    implementation 'com.squareup.retrofit2:converter-gson:3.0.0'
    implementation 'com.squareup.okhttp3:okhttp:5.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:5.1.0'
    implementation 'com.google.code.gson:gson:2.13.1'
    
    // Image loading
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    
    // Barcode scanning
    implementation 'com.journeyapps:zxing-android-embedded:4.3.0'
    implementation 'com.google.zxing:core:3.5.3'
    
    // CSV/Excel handling
    implementation 'com.opencsv:opencsv:5.12.0'
    implementation 'org.apache.poi:poi:5.4.1'
    implementation 'org.apache.poi:poi-ooxml:5.4.1'

    // Database encryption with SQLCipher
    implementation 'net.zetetic:android-database-sqlcipher:4.5.4'

    // Android Security libraries
    implementation 'androidx.security:security-crypto:1.1.0-alpha06'

    // Certificate pinning and TLS
    implementation 'com.squareup.okhttp3:okhttp-tls:5.1.0'

    // User Messaging Platform for ad consent
    implementation 'com.google.android.ump:user-messaging-platform:3.2.0'

    // AdMob for displaying ads
    implementation 'com.google.android.gms:play-services-ads:24.5.0'

    // Play Core library for in-app updates
    implementation 'com.google.android.play:app-update-ktx:2.1.0'

    // Testing

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.19.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:6.0.0'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2'
    testImplementation 'androidx.room:room-testing:2.7.2'
    testImplementation 'androidx.test:core:1.7.0'
    testImplementation 'androidx.test.ext:junit:1.3.0'
    testImplementation 'org.robolectric:robolectric:4.15.1'
    testImplementation 'androidx.paging:paging-testing:3.3.6'
    testImplementation 'io.mockk:mockk:1.14.5' // Mocking library for unit tests

    // Android Testing
    androidTestImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.7.0'
    androidTestImplementation 'androidx.test:runner:1.7.0'
    androidTestImplementation 'androidx.test:rules:1.7.0'
    androidTestImplementation 'androidx.paging:paging-testing:3.3.6'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.10.2'
    androidTestImplementation 'androidx.room:room-testing:2.7.2'
    implementation 'org.slf4j:slf4j-simple:2.0.17'
    implementation 'androidx.preference:preference-ktx:1.2.1'

    // Add BND tools library for aQute.bnd.annotation
    implementation('biz.aQute.bnd:biz.aQute.bndlib:7.1.0') {
        exclude group: 'biz.aQute.bnd', module: 'biz.aQute.bnd.util'
    }

    // Add FindBugs annotations library
    implementation('com.google.code.findbugs:annotations:3.0.1') {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
    }
}

configurations.configureEach {
        exclude group: 'com.google.code.findbugs', module: 'jsr305'
        exclude group: 'net.jcip', module: 'jcip-annotations'
    }
